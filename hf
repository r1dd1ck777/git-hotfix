#!/usr/bin/env ruby

VERSION = '1.1.3'
ROOT_DIR = `ls -l /usr/bin/`.split("\n").detect{|symlink| symlink.include? 'git-hotfix' }.scan(/\->\s(.*)\/hf/)[0][0]
PROJECT_DIR = `pwd`.gsub("\n", '')

# p ROOT_DIR
# p PROJECT_DIR

require 'yaml'
require ROOT_DIR + '/context.rb'
require ROOT_DIR + '/config.rb'
require ROOT_DIR + '/remote.rb'
require ROOT_DIR + '/exec_cli.rb'
require ROOT_DIR + '/deploy_action.rb'
require ROOT_DIR + '/save_action.rb'
require ROOT_DIR + '/checkout_action.rb'
require ROOT_DIR + '/delete_merged_action.rb'
require ROOT_DIR + '/config_action.rb'
require ROOT_DIR + '/sync_action.rb'
require ROOT_DIR + '/actions/reset_action.rb'

def help_action
  print "Version: #{VERSION}" + "\n\n"
  print 'Examples: ' + "\n\n"
  print 'hf 777' + "\n"
  print 'hf save "its a comment"' + "\n"
  print 'hf save master develop "its a comment"' + "\n"
  print 'hf deploy master develop "its a comment"' + "\n"
  print 'hf delete-merged' + "\n"
  print 'hf config' + "\n"
  print 'hf self-update [VERSION]' + "\n"
  print 'hf sync' + "\n"
  print 'hf reset' + "\n"
  print "\n"
  print 'Options: ' + "\n"
  print 'No push: (--no-push|--local) prevents pushes to remote' + "\n"
  print 'hf save master "its a comment" --local' + "\n"
  print "\n"
end

def run_actions
  args = ARGV.select{|arg| arg[0] != '-' || arg.include?(' ') }
  flags = ARGV.select{|arg| arg[0] == '-' && !arg.include?(' ') }
  options = {}
  options[:no_push] = flags.include?('--no-push') || flags.include?('--local')

  if args[0] == 'save'
    return SaveAction.(args, options)
  end

  if args[0] == 'deploy'
    return DeployAction.(args, options)
  end

  if args[0] == 'config'
    return ConfigAction.(args, options)
  end

  if args[0] == 'sync'
    return SyncAction.(args, options)
  end

  if args[0] == 'self-update'
    self_update_action
    exit
  end

  if args[0] == 'delete-merged'
    return DeleteMergedAction.(args, options)
  end

  if args[0] == 'reset'
    return ResetAction.(args, options)
  end

  if args.count == 1
    return CheckoutAction.(args, options)
  end

  if args.count == 0
    help_action
    exit
  end
end

def sync_master_action
  cli "git merge master"
end

def self_update_action
  checkout = ARGV[1] || :master
  dir = `ls -l /usr/bin/`.split("\n").detect{|symlink| symlink.include? 'git-hotfix' }
  dir = dir.scan(/\->\s(.*)\/hf/)[0][0]
  `cd #{dir} && git pull origin #{checkout}`
end

def current_branch
  branches_raw.detect{|br| br.include? '*'}.gsub('*', '').strip
end

def cli cmds, options = {}
  options[:silent] = false
  cmds = [cmds] unless cmds.is_a? Array
  exec cmds.join(' && ')
end

def branches_raw
  list = `git branch`
  list.split("\n")
end

def branches
  branches_raw.map{|b| b.gsub('*', '').strip }
end

def branch_exists? name
  branches.include? name
end

def has_changes?
  status = `git status`
  !status.include? 'nothing to commit, working directory clean'
end

def main
  ExecCli.(run_actions)
end

main()
